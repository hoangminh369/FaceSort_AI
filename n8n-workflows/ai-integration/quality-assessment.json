{
  "name": "Quality Assessment",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "/api/assess-quality",
        "options": {}
      },
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        250,
        300
      ],
      "webhookId": "quality-assessment"
    },
    {
      "parameters": {},
      "name": "When clicking \"Execute Workflow\"",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        250,
        450
      ]
    },
    {
      "parameters": {
        "jsCode": "// Get image URL from input or request body\nlet imageUrl;\n\nif ($input.first().json.imageUrl) {\n  imageUrl = $input.first().json.imageUrl;\n} else if ($input.first().json.body?.imageUrl) {\n  imageUrl = $input.first().json.body.imageUrl;\n} else {\n  return [\n    {\n      json: {\n        success: false,\n        error: 'No image URL provided'\n      }\n    }\n  ];\n}\n\nreturn [\n  {\n    json: {\n      imageUrl,\n      actions: ['quality']\n    }\n  }\n];"
      },
      "name": "Extract Image URL",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        450,
        400
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $env.DEEPFACE_API_URL }}/analyze",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "n8n-nodes-base.httpBasicAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "x-api-key",
              "value": "={{ $env.DEEPFACE_API_KEY }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={ \"img_url\": \"{{ $json.imageUrl }}\", \"actions\": {{ $json.actions }} }"
      },
      "name": "Call DeepFace API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        650,
        400
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.success }}",
              "value2": "true"
            }
          ]
        }
      },
      "name": "If Successful",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        850,
        400
      ]
    },
    {
      "parameters": {
        "jsCode": "// Process quality assessment response\nconst response = $input.first().json;\n\n// Extract quality metrics\nconst brightness = response.quality?.brightness || 0;\nconst contrast = response.quality?.contrast || 0;\nconst blur = response.quality?.blur || 0;\nconst noise = response.quality?.noise || 0;\n\n// Calculate weighted overall quality score\nconst weights = {\n  brightness: 0.25,\n  contrast: 0.25,\n  blur: 0.3,\n  noise: 0.2\n};\n\nlet normalizedBrightness = 0;\nif (brightness >= 0.4 && brightness <= 0.7) {\n  // Ideal brightness range\n  normalizedBrightness = 1.0;\n} else if (brightness < 0.4) {\n  // Too dark\n  normalizedBrightness = brightness / 0.4;\n} else {\n  // Too bright\n  normalizedBrightness = Math.max(0, 1 - ((brightness - 0.7) / 0.3));\n}\n\nlet normalizedContrast = contrast;\nlet normalizedBlur = 1 - blur; // Less blur is better\nlet normalizedNoise = 1 - noise; // Less noise is better\n\nconst qualityScore = \n  (normalizedBrightness * weights.brightness) + \n  (normalizedContrast * weights.contrast) + \n  (normalizedBlur * weights.blur) + \n  (normalizedNoise * weights.noise);\n\n// Round to 2 decimal places\nconst roundedQualityScore = Math.round(qualityScore * 100) / 100;\n\nreturn [\n  {\n    json: {\n      success: true,\n      imageUrl: $input.first().json.imageUrl,\n      qualityScore: roundedQualityScore,\n      metrics: {\n        brightness,\n        contrast,\n        blur,\n        noise\n      },\n      normalized: {\n        brightness: normalizedBrightness,\n        contrast: normalizedContrast,\n        blur: normalizedBlur,\n        noise: normalizedNoise\n      }\n    }\n  }\n];"
      },
      "name": "Process Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        1050,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Handle error in quality assessment\nreturn [\n  {\n    json: {\n      success: false,\n      imageUrl: $input.first().json.imageUrl,\n      error: $input.first().json.error || 'Quality assessment failed',\n      qualityScore: 0,\n      metrics: {\n        brightness: 0,\n        contrast: 0,\n        blur: 0,\n        noise: 0\n      }\n    }\n  }\n];"
      },
      "name": "Handle Error",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        1050,
        500
      ]
    },
    {
      "parameters": {
        "resumeOnFail": true,
        "options": {}
      },
      "name": "Combine Results",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        1250,
        400
      ]
    }
  ],
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Extract Image URL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking \"Execute Workflow\"": {
      "main": [
        [
          {
            "node": "Extract Image URL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Image URL": {
      "main": [
        [
          {
            "node": "Call DeepFace API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call DeepFace API": {
      "main": [
        [
          {
            "node": "If Successful",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Successful": {
      "main": [
        [
          {
            "node": "Process Results",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Handle Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Results": {
      "main": [
        [
          {
            "node": "Combine Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle Error": {
      "main": [
        [
          {
            "node": "Combine Results",
            "type": "main",
            "index": 1
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "saveExecutionProgress": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "error-handling"
  },
  "tags": [
    {
      "name": "ai-integration"
    },
    {
      "name": "quality-assessment"
    }
  ],
  "versionId": "1",
  "id": "quality-assessment",
  "meta": {
    "instanceId": "local-instance"
  }
} 