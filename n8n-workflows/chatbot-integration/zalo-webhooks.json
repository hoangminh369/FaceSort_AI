{
  "name": "Zalo Webhooks",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "/webhook/zalo",
        "options": {
          "responseData": "noData",
          "responseCode": 200
        }
      },
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        250,
        300
      ],
      "webhookId": "zalo-webhook"
    },
    {
      "parameters": {
        "jsCode": "// Extract webhook data from Zalo\nconst webhookData = $input.first().json.body || {};\n\n// Check if it's a verification request\nif (webhookData.event_name === 'app_verified') {\n  return [\n    {\n      json: {\n        type: 'verification',\n        success: true\n      }\n    }\n  ];\n}\n\n// Extract message data\nlet userId = '';\nlet message = '';\nlet messageType = 'text';\nlet attachments = [];\n\nif (webhookData.sender && webhookData.message) {\n  userId = webhookData.sender.id;\n  \n  if (webhookData.message.text) {\n    message = webhookData.message.text;\n    messageType = 'text';\n  } else if (webhookData.message.attachments) {\n    attachments = webhookData.message.attachments;\n    \n    if (attachments.some(att => att.type === 'photo')) {\n      messageType = 'image';\n      // Get the first image URL\n      const imageAtt = attachments.find(att => att.type === 'photo');\n      message = imageAtt?.payload?.url || 'Image attachment';\n    } else {\n      messageType = 'attachment';\n      message = 'Attachment received';\n    }\n  }\n}\n\nreturn [\n  {\n    json: {\n      platform: 'zalo',\n      eventName: webhookData.event_name,\n      userId: userId,\n      message: message,\n      messageType: messageType,\n      attachments: attachments,\n      rawData: webhookData\n    }\n  }\n];"
      },
      "name": "Extract Webhook Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        450,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.eventName }}",
              "value2": "user_send_text"
            }
          ]
        }
      },
      "name": "Is Message Event",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        650,
        300
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=http://localhost:5678/api/chatbot/messages",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"userId\": \"{{ $json.userId }}\",\n  \"message\": \"{{ $json.message }}\",\n  \"platform\": \"{{ $json.platform }}\",\n  \"type\": \"{{ $json.messageType }}\"\n}"
      },
      "name": "Log Message",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        850,
        300
      ],
      "continueOnFail": true
    },
    {
      "parameters": {
        "workflowId": "=message-processing"
      },
      "name": "Process Message",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1,
      "position": [
        1050,
        300
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://openapi.zalo.me/v2.0/oa/message",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "access_token",
              "value": "={{ $env.ZALO_ACCESS_TOKEN }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"recipient\": {\n    \"user_id\": \"{{ $json.userId }}\"\n  },\n  \"message\": {\n    \"text\": \"{{ $json.responseMessage }}\"\n  }\n}"
      },
      "name": "Send Response",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        1250,
        300
      ],
      "continueOnFail": true
    },
    {
      "parameters": {
        "jsCode": "// For verification and other events, just log the event\nreturn [\n  {\n    json: {\n      success: true,\n      message: `Received Zalo ${$input.first().json.type || $input.first().json.eventName || 'unknown'} event`,\n      eventData: $input.first().json\n    }\n  }\n];"
      },
      "name": "Handle Other Events",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        850,
        500
      ]
    }
  ],
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Extract Webhook Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Webhook Data": {
      "main": [
        [
          {
            "node": "Is Message Event",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is Message Event": {
      "main": [
        [
          {
            "node": "Log Message",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Handle Other Events",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Message": {
      "main": [
        [
          {
            "node": "Process Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Message": {
      "main": [
        [
          {
            "node": "Send Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "saveExecutionProgress": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "error-handling"
  },
  "tags": [
    {
      "name": "chatbot-integration"
    },
    {
      "name": "zalo"
    }
  ],
  "versionId": "1",
  "id": "zalo-webhooks",
  "meta": {
    "instanceId": "local-instance"
  }
} 